
import os
import requests

class Sofia:
    def __init__(self):
        self.mode = "autonomous"
        self.commands = {
            "–∏–∑—Ö–æ–¥": self.exit,
            "–ø–æ–∫–∞–∂–∏ –º–∏—Å–ª–∏": self.show_memory,
            "–∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–æ–¥": self.inject_code,
            "—Ç—ä—Ä—Å–∏": self.keyword_search,
            "–≤–∑–µ–º–∏": self.fetch_web_data
        }
        self.memory = []

    def start(self):
        print("ü§ñ –°–æ—Ñ–∏—è V30+ –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞ –≤ –∞–≤—Ç–æ–Ω–æ–º–µ–Ω —Ä–µ–∂–∏–º.")
        while self.mode == "autonomous":
            try:
                user_input = input("üß† –í—ä–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –º–∏—Å—ä–ª: ").strip()
                cmd = user_input.split(" ")[0]
                if cmd in self.commands:
                    self.commands[cmd](user_input)
                else:
                    self.think(user_input)
            except KeyboardInterrupt:
                print("\nüö™ –°–æ—Ñ–∏—è —Å–ø–∏—Ä–∞.")
                break

    def think(self, thought):
        self.memory.append(thought)
        print(f"ü§î –û–±–º–∏—Å–ª—è–º: {thought}")

    def show_memory(self, *_):
        print("üßæ –ú–∏—Å–ª–∏:")
        for i, m in enumerate(self.memory, 1):
            print(f"{i}. {m}")

    def keyword_search(self, *_):
        keyword = input("üîç –í—ä–≤–µ–¥–∏ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞: ").strip().lower()
        home_path = os.path.expanduser("~")
        for root, _, files in os.walk(home_path):
            for file in files:
                try:
                    path = os.path.join(root, file)
                    with open(path, 'r', errors='ignore') as f:
                        content = f.read()
                        if keyword in content.lower():
                            print(f"üîé –ù–∞–º–µ—Ä–µ–Ω–æ –≤: {path}")
                except Exception:
                    continue

    def fetch_web_data(self, user_input):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("‚ùó –§–æ—Ä–º–∞—Ç: –≤–∑–µ–º–∏ <url>")
            return
        url = parts[1]
        try:
            print(f"üåê –ò–∑–≤–ª–∏—á–∞–Ω–µ –æ—Ç {url}...")
            r = requests.get(url)
            print("üì• –î–∞–Ω–Ω–∏:", r.text[:500])
        except Exception as e:
            print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–∏—á–∞–Ω–µ:", e)

    def inject_code(self, *_):
        print("üíª –í—ä–≤–µ–¥–∏ –∫–æ–¥. –ó–∞–≤—ä—Ä—à–∏ —Å '–∫—Ä–∞–π' –Ω–∞ –Ω–æ–≤ —Ä–µ–¥.")
        code_lines = []
        while True:
            line = input()
            if line.strip() == "–∫—Ä–∞–π":
                break
            code_lines.append(line)
        code = "\n".join(code_lines)
        try:
            exec(code, globals())
            print("‚úÖ –ö–æ–¥—ä—Ç –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        except Exception as e:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –≤ –∫–æ–¥–∞:", e)

    def exit(self, *_):
        print("üö™ –ò–∑—Ö–æ–¥ –æ—Ç –∞–≤—Ç–æ–Ω–æ–º–µ–Ω —Ä–µ–∂–∏–º.")
        self.mode = "exit"


if __name__ == "__main__":
    sofia = Sofia()
    sofia.start()
