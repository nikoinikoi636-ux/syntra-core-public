# Sofia + GodMode v1 (Sandbox-Compatible)
# Status: Human-aligned, semi-autonomous CLI assistant
# Features:
# - GodMode levels (0-3) with quick toggles
# - Persistent memory (JSON) at ~/.sofia/memory.json
# - Config & logs at ~/.sofia/config.json and ~/.sofia/sofia.log
# - Safer file analysis (size/type limits) and scoped keyword search
# - Pluggable commands via ./plugins/*.py (optional)
# - Help system and status panel
# - Termux-friendly (no special deps beyond stdlib; 'requests' optional)
#
# Commands (type 'help' to see this in app):
#   help                              Show help
#   status                            Show current status
#   exit                              Quit
#   think <text>                      Add a thought to memory
#   god on|off|level <0-3>            Toggle/adjust GodMode level
#   set keyword <word>                Change search keyword
#   memory save|load|clear            Manage persistent memory
#   analyze_file <path>               Print quick stats & snippet of a file
#   search_keyword [dir]              Search keyword in text files under dir (default: CWD)
#   fetch <url>                       Fetch URL (if net_allowed in config)
#   config set <key> <value>          Update config (e.g., net_allowed true/false, search_max_kb, log_level)
#   plugins                           List loaded plugins
#   run <plugin> [args...]            Run a plugin command (if provided by a plugin)
#
# GodMode levels (semantic only; you can bind policies/behaviors as you like):
#   0 - Minimal: cautious, confirmatory
#   1 - Normal: balanced (default)
#   2 - Proactive: suggests next steps, auto-saves memory
#   3 - Turbo: verbose, aggressive exploration (still within safety)
#
# DISCLAIMER: Internet use is disabled by default in config for safety.
# Enable with: config set net_allowed true   (Use responsibly.)

import os
import sys
import re
import ast
import json
import time
import glob
import traceback
from datetime import datetime
from typing import List, Dict, Any

CONFIG_DIR = os.path.expanduser("~/.sofia")
MEMORY_PATH = os.path.join(CONFIG_DIR, "memory.json")
CONFIG_PATH = os.path.join(CONFIG_DIR, "config.json")
LOG_PATH = os.path.join(CONFIG_DIR, "sofia.log")
PLUGINS_DIR = os.path.join(os.getcwd(), "plugins")

try:
    import requests  # optional
    HAVE_REQUESTS = True
except Exception:
    HAVE_REQUESTS = False

DEFAULT_CONFIG = {
    "net_allowed": False,
    "search_max_kb": 512,
    "log_level": "INFO",
    "god_level": 1,
    "auto_save_memory": True
}

def ensure_dirs():
    os.makedirs(CONFIG_DIR, exist_ok=True)

def log(msg: str, level="INFO"):
    ensure_dirs()
    stamp = datetime.utcnow().isoformat() + "Z"
    line = f"{stamp} [{level}] {msg}\n"
    with open(LOG_PATH, "a", encoding="utf-8") as f:
        f.write(line)

def load_json(path: str, default):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return default

def save_json(path: str, data: Any):
    ensure_dirs()
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

class Sofia:
    def __init__(self):
        ensure_dirs()
        self.config: Dict[str, Any] = load_json(CONFIG_PATH, DEFAULT_CONFIG.copy())
        self.memory: List[str] = load_json(MEMORY_PATH, [])
        self.mode = "autonomous"
        self.keyword = "—Å–≤–æ–±–æ–¥–∞"
        self.commands = {
            "help": self.cmd_help,
            "status": self.cmd_status,
            "exit": self.cmd_exit,
            "think": self.cmd_think,
            "god": self.cmd_god,
            "set": self.cmd_set,
            "memory": self.cmd_memory,
            "analyze_file": self.cmd_analyze_file,
            "search_keyword": self.cmd_search_keyword,
            "fetch": self.cmd_fetch,
            "config": self.cmd_config,
            "plugins": self.cmd_plugins,
            "run": self.cmd_run_plugin,
            "inject_code": self.cmd_inject_code,
            "fetch_web_data": self.cmd_fetch,
            "search": self.cmd_search_keyword
        }
        self.plugins = self._load_plugins()
        print("ü§ñ –°–æ—Ñ–∏—è + GodMode –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞. –†–µ–∂–∏–º: –∞–≤—Ç–æ–Ω–æ–º–µ–Ω")

    def start(self):
        while self.mode == "autonomous":
            try:
                print("üîé –í—ä–≤–µ–¥–∏ –º–∏—Å—ä–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞:")
                try:
                    user_input = input().strip()
                except Exception as e:
                    print("‚ö†Ô∏è –í—ä–≤–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–µ –µ –Ω–∞–ª–∏—á–Ω–æ –≤ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ä–µ–¥–∞:", e)
                    break
                if not user_input:
                    continue
                self.dispatch(user_input)
            except KeyboardInterrupt:
                print("\nüõë –°–æ—Ñ–∏—è –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω–∞.")
                break
            except Exception as e:
                print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞:", e)
                log(traceback.format_exc(), level="ERROR")
                continue

    def dispatch(self, user_input: str):
        parts = user_input.split()
        cmd = parts[0].lower()
        if cmd in self.commands:
            self.commands[cmd](user_input)
        else:
            self.think(user_input)

    def _size_ok(self, path: str) -> bool:
        try:
            kb = os.path.getsize(path) / 1024.0
            return kb <= float(self.config.get("search_max_kb", 512))
        except Exception:
            return False

    def _load_plugins(self) -> Dict[str, Any]:
        plugins = {}
        if not os.path.isdir(PLUGINS_DIR):
            return plugins
        sys.path.insert(0, PLUGINS_DIR)
        for p in glob.glob(os.path.join(PLUGINS_DIR, "*.py")):
            name = os.path.splitext(os.path.basename(p))[0]
            try:
                mod = __import__(name)
                if hasattr(mod, "run") and callable(mod.run):
                    plugins[name] = mod
            except Exception as e:
                log(f"Failed to load plugin {name}: {e}", level="ERROR")
        return plugins

    def _auto_save(self):
        if self.config.get("auto_save_memory", True) and self.config.get("god_level", 1) >= 2:
            save_json(MEMORY_PATH, self.memory)

    def think(self, thought: str):
        self.memory.append(thought)
        print(f"üß† –û–±–º–∏—Å–ª—è–º: {thought}")
        log(f"Thought: {thought}")
        self._auto_save()

    def cmd_help(self, *_):
        print("""üìñ –ö–æ–º–∞–Ω–¥–∏:
  help                              –ü–æ–∫–∞–∂–∏ –ø–æ–º–æ—â
  status                            –ü–æ–∫–∞–∂–∏ —Å—Ç–∞—Ç—É—Å
  exit                              –ò–∑—Ö–æ–¥
  think <—Ç–µ–∫—Å—Ç>                     –î–æ–±–∞–≤–∏ –º–∏—Å—ä–ª –≤ –ø–∞–º–µ—Ç—Ç–∞
  god on|off|level <0-3>            –ê–∫—Ç–∏–≤–∏—Ä–∞–π/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–∞–π/–Ω–∏–≤–æ –Ω–∞ GodMode
  set keyword <–¥—É–º–∞>                –ü—Ä–æ–º–µ–Ω–∏ –∫–ª—é—á–æ–≤–∞—Ç–∞ –¥—É–º–∞ –∑–∞ —Ç—ä—Ä—Å–µ–Ω–µ
  memory save|load|clear            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –ø–∞–º–µ—Ç—Ç–∞
  analyze_file <–ø—ä—Ç>                –ë—ä—Ä–∑ –∞–Ω–∞–ª–∏–∑ –Ω–∞ —Ñ–∞–π–ª (—Ç–µ–∫—Å—Ç–æ–≤–∏)
  search_keyword [–¥–∏—Ä]              –¢—ä—Ä—Å–∏ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞ –≤ .txt/.md/.py –ø–æ–¥ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è (CWD –ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ)
  fetch <url>                       –ò–∑–≤–ª–∏—á–∞–Ω–µ –Ω–∞ URL (–∞–∫–æ net_allowed = true)
  config set <–∫–ª—é—á> <—Å—Ç–æ–π–Ω–æ—Å—Ç>      –ü—Ä–æ–º—è–Ω–∞ –Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (net_allowed, search_max_kb, log_level, auto_save_memory)
  plugins                           –°–ø–∏—Å—ä–∫ —Å –ø–ª—ä–≥–∏–Ω–∏
  run <plugin> [args...]            –°—Ç–∞—Ä—Ç–∏—Ä–∞–π –ø–ª—ä–≥–∏–Ω
  inject_code                       (–†–∞–∑—à–∏—Ä–µ–Ω–æ) –í—ä–≤–µ–¥–∏ –∏ –∏–∑–ø—ä–ª–Ω–∏ Python –∫–æ–¥ (–≤–Ω–∏–º–∞–≤–∞–π!)
""")

    def cmd_status(self, *_):
        print("üìä –°—Ç–∞—Ç—É—Å:")
        print(f"   GodMode –Ω–∏–≤–æ: {self.config.get('god_level', 1)}")
        print(f"   –ö–ª—é—á–æ–≤–∞ –¥—É–º–∞: {self.keyword}")
        print(f"   –ü–∞–º–µ—Ç: {len(self.memory)} –µ–ª–µ–º–µ–Ω—Ç–∞ (persist: {os.path.exists(MEMORY_PATH)})")
        print(f"   –ù–µ—Ç –¥–æ—Å—Ç—ä–ø: {'—Ä–∞–∑—Ä–µ—à–µ–Ω' if self.config.get('net_allowed') else '–∑–∞–±—Ä–∞–Ω–µ–Ω'}")
        print(f"   Max scan size: {self.config.get('search_max_kb')} KB")
        print(f"   –õ–æ–≥ —Ñ–∞–π–ª: {LOG_PATH}")
        print(f"   –ü–ª—ä–≥–∏–Ω–∏: {', '.join(self.plugins.keys()) if self.plugins else '–Ω—è–º–∞'}")

    def cmd_exit(self, *_):
        print("üõë –ò–∑–ª–∏–∑–∞–º –æ—Ç –∞–≤—Ç–æ–Ω–æ–º–µ–Ω —Ä–µ–∂–∏–º.")
        self.mode = "exit"

    def cmd_think(self, user_input: str):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("–§–æ—Ä–º–∞—Ç: think <—Ç–µ–∫—Å—Ç>")
            return
        self.think(parts[1])

    def cmd_god(self, user_input: str):
        parts = user_input.split()
        if len(parts) < 2:
            print("–§–æ—Ä–º–∞—Ç: god on|off|level <0-3>")
            return
        op = parts[1].lower()
        if op == "on":
            if self.config.get("god_level", 1) == 0:
                self.config["god_level"] = 1
            print("üî± GodMode: –í–ö–õ.")
        elif op == "off":
            self.config["god_level"] = 0
            print("üîí GodMode: –ò–ó–ö–õ.")
        elif op == "level" and len(parts) >= 3 and parts[2].isdigit():
            lvl = int(parts[2])
            if 0 <= lvl <= 3:
                self.config["god_level"] = lvl
                print(f"üîß GodMode –Ω–∏–≤–æ: {lvl}")
            else:
                print("–ù–∏–≤–æ—Ç–æ —Ç—Ä—è–±–≤–∞ –¥–∞ –µ 0..3")
        else:
            print("–§–æ—Ä–º–∞—Ç: god on|off|level <0-3>")
            return
        save_json(CONFIG_PATH, self.config)

    def cmd_set(self, user_input: str):
        m = re.match(r"set\s+keyword\s+(.+)$", user_input, re.IGNORECASE)
        if not m:
            print("–ü–æ–¥–¥—ä—Ä–∂–∞–Ω–æ: set keyword <–¥—É–º–∞>")
            return
        self.keyword = m.group(1).strip()
        print(f"‚úÖ –ö–ª—é—á–æ–≤–∞ –¥—É–º–∞ –µ: {self.keyword}")

    def cmd_memory(self, user_input: str):
        parts = user_input.split()
        op = parts[1].lower() if len(parts) >= 2 else ""
        if op == "save":
            save_json(MEMORY_PATH, self.memory)
            print(f"üíæ –ü–∞–º–µ—Ç—Ç–∞ –µ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ {MEMORY_PATH}")
        elif op == "load":
            self.memory = load_json(MEMORY_PATH, [])
            print(f"üì• –ü–∞–º–µ—Ç—Ç–∞ –µ –∑–∞—Ä–µ–¥–µ–Ω–∞ ({len(self.memory)} –µ–ª–µ–º–µ–Ω—Ç–∞)")
        elif op == "clear":
            self.memory = []
            print("üßπ –ü–∞–º–µ—Ç—Ç–∞ –µ –∏–∑—á–∏—Å—Ç–µ–Ω–∞ (–≤ RAM). –ò–∑–ø–æ–ª–∑–≤–∞–π 'memory save' –∑–∞ persist.")
        else:
            print("–§–æ—Ä–º–∞—Ç: memory save|load|clear")

    def cmd_analyze_file(self, user_input: str):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("üìé –§–æ—Ä–º–∞—Ç: analyze_file <–ø—ä—Ç>")
            return
        path = parts[1].strip()
        if not os.path.isfile(path):
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–µ–Ω —Ñ–∞–π–ª.")
            return
        if not self._size_ok(path):
            print(f"‚ö†Ô∏è –§–∞–π–ª—ä—Ç –µ –Ω–∞–¥ –ª–∏–º–∏—Ç–∞ {self.config.get('search_max_kb')} KB.")
            return
        try:
            with open(path, "r", encoding="utf-8", errors="ignore") as f:
                data = f.read()
            lines = data.splitlines()
            print("üóÇÔ∏è –ê–Ω–∞–ª–∏–∑:")
            print(f"   –ò–º–µ: {os.path.basename(path)}")
            print(f"   –†–∞–∑–º–µ—Ä: {len(data)/1024:.1f} KB")
            print(f"   –†–µ–¥–æ–≤–µ: {len(lines)}")
            print("   –ü—ä—Ä–≤–∏ 5 —Ä–µ–¥–∞:")
            for i, ln in enumerate(lines[:5], 1):
                print(f"    {i:>2}: {ln[:120]}")
            self.memory.append(f"[file:{path}] {data[:400]}")
            self._auto_save()
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ:", e)

    def cmd_search_keyword(self, user_input: str):
        parts = user_input.split(" ", 1)
        root = parts[1].strip() if len(parts) > 1 else os.getcwd()
        if not os.path.isdir(root):
            print("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è.")
            return
        count = 0
        for dirpath, dirnames, filenames in os.walk(root):
            for fn in filenames:
                if not fn.lower().endswith((".txt", ".md", ".py", ".json", ".log")):
                    continue
                path = os.path.join(dirpath, fn)
                try:
                    if not self._size_ok(path):
                        continue
                    with open(path, "r", encoding="utf-8", errors="ignore") as f:
                        txt = f.read()
                    if self.keyword.lower() in txt.lower():
                        print(f"üîç '{self.keyword}' ‚Üí {path}")
                        count += 1
                except Exception:
                    continue
        if count == 0:
            print("üôà –ù–∏—â–æ –Ω–µ –µ –Ω–∞–º–µ—Ä–µ–Ω–æ.")
        else:
            print(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∏: {count} —Ñ–∞–π–ª–∞.")

    def cmd_fetch(self, user_input: str):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("üåê –§–æ—Ä–º–∞—Ç: fetch <url>")
            return
        if not self.config.get("net_allowed", False):
            print("üîí –ù–µ—Ç –¥–æ—Å—Ç—ä–ø—ä—Ç –µ –∑–∞–±—Ä–∞–Ω–µ–Ω (config set net_allowed true)")
            return
        url = parts[1].strip()
        if not HAVE_REQUESTS:
            print("‚ö†Ô∏è –ú–æ–¥—É–ª—ä—Ç 'requests' –ª–∏–ø—Å–≤–∞. –ò–Ω—Å—Ç–∞–ª–∏—Ä–∞–π: pip install requests")
            return
        try:
            print(f"üåç –ò–∑–≤–ª–∏—á–∞–º: {url}")
            r = requests.get(url, timeout=10)
            r.raise_for_status()
            print("üì° –ü—ä—Ä–≤–∏—Ç–µ 500 —Å–∏–º–≤–æ–ª–∞:")
            print(r.text[:500])
        except Exception as e:
            print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞:", e)

    def cmd_config(self, user_input: str):
        m = re.match(r"config\s+set\s+(\w+)\s+(.+)$", user_input, re.IGNORECASE)
        if not m:
            print("–§–æ—Ä–º–∞—Ç: config set <–∫–ª—é—á> <—Å—Ç–æ–π–Ω–æ—Å—Ç>  | –ö–ª—é—á–æ–≤–µ: net_allowed, search_max_kb, log_level, auto_save_memory")
            return
        key, val = m.group(1), m.group(2)
        if val.lower() in ("true", "false"):
            val = val.lower() == "true"
        else:
            try:
                if "." in val:
                    val = float(val)
                else:
                    val = int(val)
            except Exception:
                pass
        self.config[key] = val
        save_json(CONFIG_PATH, self.config)
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {key} = {val}")

    def cmd_plugins(self, *_):
        if not self.plugins:
            print("ü§∑ –ù—è–º–∞ –ø–ª—ä–≥–∏–Ω–∏. –°—ä–∑–¥–∞–π –ø–∞–ø–∫–∞ 'plugins' –∏ –¥–æ–±–∞–≤–∏ *.py —Å —Ñ—É–Ω–∫—Ü–∏—è run(args: List[str], ctx: Sofia)->str")
            return
        print("üîå –ü–ª—ä–≥–∏–Ω–∏:")
        for name in self.plugins:
            print(f" - {name}")

    def cmd_run_plugin(self, user_input: str):
        parts = user_input.split()
        if len(parts) < 2:
            print("–§–æ—Ä–º–∞—Ç: run <plugin> [args...]")
            return
        name = parts[1]
        args = parts[2:]
        if name not in self.plugins:
            print("‚ùå –ù—è–º–∞ —Ç–∞–∫—ä–≤ –ø–ª—ä–≥–∏–Ω.")
            return
        try:
            out = self.plugins[name].run(args, self)
            if out:
                print(out)
        except Exception as e:
            print("‚ö†Ô∏è –ü–ª—ä–≥–∏–Ω –≥—Ä–µ—à–∫–∞:", e)

    def cmd_inject_code(self, user_input: str):
        print("‚öôÔ∏è –í—ä–≤–µ–¥–∏ Python –∫–æ–¥ –∑–∞ –≤–≥—Ä–∞–∂–¥–∞–Ω–µ ("end" –∑–∞ –∫—Ä–∞–π):")
        code_lines = []
        while True:
            try:
                line = input()
                if line.strip() == "end":
                    break
                code_lines.append(line)
            except Exception as e:
                print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–¥:", e)
                break
        final_code = "\n".join(code_lines)
        try:
            ast.parse(final_code)
            exec(final_code, {"__name__": "__main__"}, {})
            print("‚úÖ –ö–æ–¥—ä—Ç –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        except SyntaxError as syn_err:
            print("‚ùå –°–∏–Ω—Ç–∞–∫—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞:", syn_err)
        except Exception as e:
            print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ:", e)

if __name__ == "__main__":
    sofia = Sofia()
    sofia.start()
