#!/usr/bin/env python3
"""
üß™ –õ–µ–∫ Master Test Runner
- –°—Ç–∞—Ä—Ç–∏—Ä–∞ –µ–¥–∏–Ω –∏–ª–∏ –≤—Å–∏—á–∫–∏ Python —Ñ–∞–π–ª–æ–≤–µ
- –ü—Ä–æ–≤–µ—Ä—è–≤–∞ –∑–∞ main/init
- –†–∞–±–æ—Ç–∏ –∏–∫–æ–Ω–æ–º–∏—á–Ω–æ (Termux-friendly)
"""

import subprocess
from pathlib import Path
import sys

CORE = Path.home() / "WorkingProgram" / "HeartCore"
LOG_FILE = CORE / "logs" / "test_runner.log"
EXCLUDE = {"__init__.py", "main.py", "orchestrator.py", "boot_levski.py"}

def has_testable_fn(code: str) -> bool:
    return "def main" in code or "def init" in code

def run_script(path: Path):
    try:
        result = subprocess.run(
            ["python3", str(path)],
            capture_output=True,
            text=True,
            timeout=30
        )
        status = "‚úÖ OK" if result.returncode == 0 else f"‚ùå ERR {result.returncode}"
        return status, result.stdout.strip() + "\n" + result.stderr.strip()
    except subprocess.TimeoutExpired:
        return "‚è∞ Timeout", f"{path.name} –Ω–µ –æ—Ç–≥–æ–≤–æ—Ä–∏ –Ω–∞–≤—Ä–µ–º–µ."
    except Exception as e:
        return "‚ùå Exception", str(e)

def main():
    LOG_FILE.parent.mkdir(parents=True, exist_ok=True)
    args = sys.argv[1:]
    targets = []

    if args:
        file_name = args[0]
        file_path = CORE / file_name
        if file_path.exists():
            targets = [file_path]
        else:
            print(f"‚ùå –§–∞–π–ª—ä—Ç –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞: {file_name}")
            return
    else:
        # –ù—è–º–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ ‚Üí —Å–∫–∞–Ω–∏—Ä–∞–º–µ –≤—Å–∏—á–∫–∏ *.py
        for py in CORE.glob("*.py"):
            if py.name not in EXCLUDE:
                code = py.read_text(encoding="utf-8", errors="ignore")
                if has_testable_fn(code):
                    targets.append(py)

    if not targets:
        print("‚ö†Ô∏è –ù—è–º–∞ –æ—Ç–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ —Ç–µ—Å—Ç–≤–∞–Ω–µ.")
        return

    with open(LOG_FILE, "w", encoding="utf-8") as log:
        for py_file in targets:
            status, output = run_script(py_file)
            log.write(f"--- {py_file.name} [{status}] ---\n{output}\n\n")
            print(f"[{status}] {py_file.name}")

    print(f"\nüìÑ –ó–∞–ø–∏—Å–∞–Ω–æ –≤: {LOG_FILE}")

if __name__ == "__main__":
    main()
