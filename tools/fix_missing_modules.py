#!/usr/bin/env python3
"""
ü©π AutoFix: –ª–∏–ø—Å–≤–∞—â–∏ Python –º–æ–¥—É–ª–∏ (–∏–º–µ–Ω–∞ –æ—Ç –ª–æ–≥–æ–≤–µ—Ç–µ)
- –°–∫–∞–Ω–∏—Ä–∞ –ª–æ–≥–æ–≤–µ—Ç–µ –∑–∞ "ModuleNotFoundError"
- –°—ä–∑–¥–∞–≤–∞ –ø—Ä–∞–∑–µ–Ω —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª–Ω–æ –∏–º–µ, –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
"""
import re
from pathlib import Path

LOG_DIR = Path.home() / "WorkingProgram" / "HeartCore" / "logs"
CORE_DIR = Path.home() / "WorkingProgram" / "HeartCore"

def find_missing_modules():
    missing = set()
    pattern = re.compile(r"No module named ['\"]([\w_]+)['\"]", re.IGNORECASE)

    for log_file in LOG_DIR.glob("*.log"):
        with open(log_file, encoding="utf-8", errors="ignore") as f:
            for line in f:
                match = pattern.search(line)
                if match:
                    missing.add(match.group(1))

    return sorted(missing)

def create_module(name: str):
    fname = CORE_DIR / f"{name}.py"
    if not fname.exists():
        with open(fname, "w", encoding="utf-8") as f:
            f.write(f'""" üîß Auto-created stub for missing module: {name} """\n\n')
            f.write("def init():\n    pass\n")
        print(f"[+] –°—ä–∑–¥–∞–¥–µ–Ω: {fname}")
    else:
        print(f"[‚úì] –í–µ—á–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞: {fname}")

if __name__ == "__main__":
    print("üîç –°–∫–∞–Ω–∏—Ä–∞–º –∑–∞ –ª–∏–ø—Å–≤–∞—â–∏ –º–æ–¥—É–ª–∏...")
    missing = find_missing_modules()
    if not missing:
        print("‚úÖ –ù—è–º–∞ –ª–∏–ø—Å–≤–∞—â–∏ –º–æ–¥—É–ª–∏ –≤ –ª–æ–≥–æ–≤–µ—Ç–µ.")
    else:
        print(f"üö® –ù–∞–º–µ—Ä–µ–Ω–∏ –ª–∏–ø—Å–≤–∞—â–∏ –º–æ–¥—É–ª–∏: {missing}")
        for name in missing:
            create_module(name)
        print("‚úÖ –ì–æ—Ç–æ–≤–æ.")
