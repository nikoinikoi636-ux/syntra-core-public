#!/usr/bin/env python3
"""
üß† Self Evaluation Core
- –û—Ü–µ–Ω—è–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Ç–∏–ª, –∏ —Ç–µ—Å—Ç–æ–≤–æ –ø–æ–∫—Ä–∏—Ç–∏–µ
- –ì–µ–Ω–µ—Ä–∏—Ä–∞ –¥–æ–∫–ª–∞–¥ —Å –ø—Ä–µ–ø–æ—Ä—ä–∫–∏
"""
from pathlib import Path
import re

CODEBASE = Path.home() / "WorkingProgram" / "HeartCore"
REPORT = CODEBASE / "logs" / "self_eval_report.txt"

def evaluate_file(path):
    score = 100
    reasons = []
    with open(path, encoding="utf-8", errors="ignore") as f:
        content = f.read()

    if len(content) < 20:
        score -= 50
        reasons.append("–ú–Ω–æ–≥–æ –∫—Ä–∞—Ç—ä–∫ –∫–æ–¥.")
    if "import" not in content:
        score -= 10
        reasons.append("–õ–∏–ø—Å–≤–∞ –∏–º–ø–æ—Ä—Ç ‚Äî –º–æ–∂–µ –¥–∞ –Ω—è–º–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.")
    if "def " not in content:
        score -= 10
        reasons.append("–õ–∏–ø—Å–≤–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏.")
    if re.search(r'print\s*\(', content):
        score -= 5
        reasons.append("–ò–∑–ø–æ–ª–∑–≤–∞–Ω–µ –Ω–∞ print –≤–º–µ—Å—Ç–æ –ª–æ–≥–∏—Ä–∞–Ω–µ.")

    return score, reasons

def run_self_eval():
    results = []
    for py_file in CODEBASE.glob("*.py"):
        score, reasons = evaluate_file(py_file)
        grade = "‚úÖ –î–æ–±—Ä–æ" if score >= 80 else "‚ö†Ô∏è –°—Ä–µ–¥–Ω–æ" if score >= 60 else "‚ùå –°–ª–∞–±–æ"
        results.append(f"[{grade}] {py_file.name} ‚Üí {score}/100")
        for r in reasons:
            results.append(f"   ‚Ä¢ {r}")
        results.append("")

    with open(REPORT, "w", encoding="utf-8") as f:
        f.write("\n".join(results))

    print(f"[üß™] –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∑–∞–≤—ä—Ä—à–µ–Ω–∞ ‚Üí {REPORT}")

if __name__ == "__main__":
    run_self_eval()
