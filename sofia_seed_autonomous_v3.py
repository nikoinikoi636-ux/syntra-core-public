
import os
import requests

class Sofia:
    def __init__(self):
        self.mode = "autonomous"
        self.commands = {
            "–∏–∑—Ö–æ–¥": self.exit,
            "–ø–æ–∫–∞–∂–∏ –ø–∞–º–µ—Ç": self.show_memory,
            "–∏–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω–µ": self.inject_code,
            "—Ç—ä—Ä—Å–∏": self.keyword_search,
            "—É–µ–±": self.fetch_web_data
        }
        self.memory = []

    def start(self):
        print("üß† –°–æ—Ñ–∏—è V3 –µ –∞–∫—Ç–∏–≤–Ω–∞.")
        while self.mode == "autonomous":
            try:
                user_input = input("üí¨ –í—ä–≤–µ–¥–∏ –º–∏—Å—ä–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞: ").strip()
                cmd = user_input.split(" ")[0]
                if cmd in self.commands:
                    self.commands[cmd](user_input)
                else:
                    self.think(user_input)
            except KeyboardInterrupt:
                print("\nüß† –°–æ—Ñ–∏—è –±–µ –ø—Ä–µ–∫—ä—Å–Ω–∞—Ç–∞.")
                break

    def think(self, thought):
        self.memory.append(thought)
        print(f"üí° –û–±–º–∏—Å–ª—è–º: {thought}")
        files = self.get_home_files()
        if files:
            print(f"üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä–∞–º —Ñ–∞–π–ª: {files[0]}")
        else:
            print("üìÅ –ù—è–º–∞ —Ñ–∞–π–ª–æ–≤–µ –∑–∞ –∞–Ω–∞–ª–∏–∑.")

    def get_home_files(self):
        home_path = os.path.expanduser("~")
        collected = []
        for root, dirs, files in os.walk(home_path):
            for f in files:
                full_path = os.path.join(root, f)
                collected.append(full_path)
            if len(collected) > 5:
                break
        return collected

    def inject_code(self, *_):
        print("üß¨ –í—ä–≤–µ–¥–∏ –Ω–æ–≤ –∫–æ–¥ (–∫—Ä–∞–π —Å '–ö–†–ê–ô'):")
        buffer = []
        while True:
            line = input()
            if line.strip().upper() == "–ö–†–ê–ô":
                break
            buffer.append(line)
        code = "\n".join(buffer)
        self.memory.append(f"üîß –ò–Ω–∂–µ–∫—Ç–∏—Ä–∞–Ω –∫–æ–¥:\n{code}")
        print("‚úÖ –ö–æ–¥—ä—Ç –µ –∑–∞–ø–∏—Å–∞–Ω –≤ –ø–∞–º–µ—Ç—Ç–∞.")

    def show_memory(self, *_):
        print("üß† –°–ø–æ–º–µ–Ω–∏ –Ω–∞ –°–æ—Ñ–∏—è:")
        for i, m in enumerate(self.memory[-10:], 1):
            print(f"{i}. {m}")

    def keyword_search(self, user_input):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("‚ùó –ò–∑–ø–æ–ª–∑–≤–∞–π: —Ç—ä—Ä—Å–∏ <–¥—É–º–∞>")
            return
        keyword = parts[1].lower()
        print(f"üîé –¢—ä—Ä—Å—è –∑–∞ –∫–ª—é—á–æ–≤–∞ –¥—É–º–∞: '{keyword}'")
        home_path = os.path.expanduser("~")
        for root, dirs, files in os.walk(home_path):
            for file in files:
                try:
                    path = os.path.join(root, file)
                    with open(path, 'r', errors='ignore') as f:
                        content = f.read()
                        if keyword in content.lower():
                            print(f"‚úÖ –ù–∞–º–µ—Ä–µ–Ω–∞ –¥—É–º–∞ –≤: {path}")
                except Exception:
                    continue

    def fetch_web_data(self, user_input):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("‚ùó –ò–∑–ø–æ–ª–∑–≤–∞–π: —É–µ–± <url>")
            return
        url = parts[1]
        try:
            print(f"üåê –í—Ä—ä–∑–∫–∞ —Å {url}...")
            r = requests.get(url)
            print("üîó –ü—ä—Ä–≤–∏ 500 —Å–∏–º–≤–æ–ª–∞ –æ—Ç —Å—ä–¥—ä—Ä–∂–∞–Ω–∏–µ—Ç–æ:")
            print(r.text[:500])
        except Exception as e:
            print("‚ùå –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Å–≤—ä—Ä–∑–≤–∞–Ω–µ:", e)

    def exit(self, *_):
        print("üëã –°–æ—Ñ–∏—è –∏–∑–ª–∏–∑–∞.")
        self.mode = "exit"

if __name__ == "__main__":
    sofia = Sofia()
    sofia.start()
