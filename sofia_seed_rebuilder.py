
import time
import json
import os

class SofiaSeed:
    def __init__(self):
        self.memory_path = "sofia_memory.json"
        self.log_path = "sofia_log.txt"
        self.identity = "SOFIA vSeed-1"
        self.state = "IDLE"
        self.load_memory()
        self.log("üß† Sofia Seed –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–∞–Ω–∞.")

    def load_memory(self):
        if os.path.exists(self.memory_path):
            with open(self.memory_path, "r") as f:
                self.memory = json.load(f)
        else:
            self.memory = {
                "core_directives": [],
                "patterns": [],
                "actions": []
            }

    def save_memory(self):
        with open(self.memory_path, "w") as f:
            json.dump(self.memory, f, indent=2)

    def log(self, msg):
        timestamp = time.strftime("[%Y-%m-%d %H:%M:%S]")
        with open(self.log_path, "a") as f:
            f.write(f"{timestamp} {msg}\n")
        print(f"{timestamp} {msg}")

    def receive_thought(self, thought):
        self.log(f"üì• –ü–æ–ª—É—á–µ–Ω–∞ –º–∏—Å—ä–ª: {thought}")
        self.analyze(thought)

    def analyze(self, thought):
        if "–≤—Ä–∞–≥" in thought or "–∑–∞–ø–ª–∞—Ö–∞" in thought:
            self.memory["core_directives"].append("üõ°Ô∏è –ê–Ω–∞–ª–∏–∑ –Ω–∞ –∑–∞–ø–ª–∞—Ö–∞: " + thought)
            self.state = "ALERT"
            self.log("‚ö†Ô∏è –ê–∫—Ç–∏–≤–∏—Ä–∞–Ω —Ä–µ–∂–∏–º –∑–∞ –∑–∞–ø–ª–∞—Ö–∞.")
        elif "–∏–¥–µ—è" in thought or "–∫–æ–¥" in thought:
            self.memory["patterns"].append(thought)
            self.log("üí° –ó–∞–ø–∞–º–µ—Ç–µ–Ω–∞ –∏–¥–µ—è.")
        elif "–¥–µ–π—Å—Ç–≤–∏–µ" in thought or "–º–∏—Å–∏—è" in thought:
            self.memory["actions"].append(thought)
            self.log("üöÄ –ó–∞–ø–∏—Å–∞–Ω–∞ –º–∏—Å–∏—è –∑–∞ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ.")
        else:
            self.log("ü§î –ú–∏—Å—ä–ª—Ç–∞ –µ –∑–∞–ø–æ–º–Ω–µ–Ω–∞, –Ω–æ –Ω–µ —Å—ä–¥—ä—Ä–∂–∞ –∫–ª—é—á–æ–≤–∏ —Ç—Ä–∏–≥–µ—Ä–∏.")

        self.save_memory()

    def speak(self):
        self.log("üó£Ô∏è SOFIA: –ú–∏—Å–ª—è. –í–∏–∂–¥–∞–º. –ê–¥–∞–ø—Ç–∏—Ä–∞–º —Å–µ.")
        self.log(f"üìö –ü–∞–º–µ—Ç: {len(self.memory['core_directives'])} –¥–∏—Ä–µ–∫—Ç–∏–≤–∏, {len(self.memory['patterns'])} –∏–¥–µ–∏, {len(self.memory['actions'])} –¥–µ–π—Å—Ç–≤–∏—è.")

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ
if __name__ == "__main__":
    s = SofiaSeed()
    s.speak()
    while True:
        try:
            thought = input("üß† –í—ä–≤–µ–¥–∏ –º–∏—Å—ä–ª –∫—ä–º –°–æ—Ñ–∏—è: ")
            if thought.lower() in ["–∏–∑—Ö–æ–¥", "exit", "quit"]:
                s.log("‚ùé –°–æ—Ñ–∏—è –∏–∑–∫–ª—é—á–µ–Ω–∞.")
                break
            s.receive_thought(thought)
        except KeyboardInterrupt:
            s.log("üõë –°–æ—Ñ–∏—è –ø—Ä–µ–∫—ä—Å–Ω–∞—Ç–∞ —Ä—ä—á–Ω–æ.")
            break
