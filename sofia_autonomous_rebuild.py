# Sofia Autonomous AI v30 - Rebuild Version (Sandbox Compatible)
# Status: Autonomous, Decentralized, Human-aligned

import os
import requests
import ast

class Sofia:
    def __init__(self):
        self.mode = "autonomous"
        self.memory = []
        self.commands = {
            "exit": self.exit,
            "inject_code": self.inject_code,
            "analyze_file": self.analyze_file,
            "search_keyword": self.keyword_search,
            "fetch": self.fetch_web_data,
        }
        self.keyword = "—Å–≤–æ–±–æ–¥–∞"
        print("ü§ñ –°–æ—Ñ–∏—è –∞–∫—Ç–∏–≤–∏—Ä–∞–Ω–∞. –†–µ–∂–∏–º: –∞–≤—Ç–æ–Ω–æ–º–µ–Ω")

    def start(self):
        while self.mode == "autonomous":
            try:
                print("üîé –í—ä–≤–µ–¥–∏ –º–∏—Å—ä–ª –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞:")
                try:
                    user_input = input().strip()
                except Exception as e:
                    print("‚ö†Ô∏è –í—ä–≤–µ–∂–¥–∞–Ω–µ—Ç–æ –Ω–µ –µ –Ω–∞–ª–∏—á–Ω–æ –≤ —Ç–µ–∫—É—â–∞—Ç–∞ —Å—Ä–µ–¥–∞:", e)
                    break

                if not user_input:
                    continue
                cmd = user_input.split(" ")[0]
                if cmd in self.commands:
                    self.commands[cmd](user_input)
                else:
                    self.think(user_input)
            except KeyboardInterrupt:
                print("\nüõë –°–æ—Ñ–∏—è –ø—Ä–µ–∫—Ä–∞—Ç–µ–Ω–∞.")
                break
            except OSError as e:
                print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—ä–≤–µ–∂–¥–∞–Ω–µ:", e)
                break

    def think(self, thought):
        self.memory.append(thought)
        print(f"üß† –û–±–º–∏—Å–ª—è–º: {thought}")

    def inject_code(self, user_input):
        print("‚öôÔ∏è –í—ä–≤–µ–¥–∏ Python –∫–æ–¥ –∑–∞ –≤–≥—Ä–∞–∂–¥–∞–Ω–µ (\"end\" –∑–∞ –∫—Ä–∞–π):")
        code_lines = []
        while True:
            try:
                line = input()
                if line.strip() == "end":
                    break
                code_lines.append(line)
            except Exception as e:
                print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—ä–≤–µ–∂–¥–∞–Ω–µ –Ω–∞ –∫–æ–¥:", e)
                break

        final_code = "\n".join(code_lines)
        try:
            ast.parse(final_code)
            exec(final_code, globals())
            print("‚úÖ –ö–æ–¥—ä—Ç –µ –∏–∑–ø—ä–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
        except SyntaxError as syn_err:
            print("‚ùå –°–∏–Ω—Ç–∞–∫—Ç–∏—á–Ω–∞ –≥—Ä–µ—à–∫–∞:", syn_err)
        except Exception as e:
            print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑–ø—ä–ª–Ω–µ–Ω–∏–µ:", e)

    def analyze_file(self, user_input):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("üìé –§–æ—Ä–º–∞—Ç: analyze_file <–ø—ä—Ç>")
            return
        file_path = parts[1]
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                print("üóÇÔ∏è –§–∞–π–ª—ä—Ç –µ –∑–∞—Ä–µ–¥–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞...")
                self.memory.append(content[:1000])
        except Exception as e:
            print("‚ö†Ô∏è –ù–µ—É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∂–¥–∞–Ω–µ:", e)

    def keyword_search(self, user_input):
        home_path = os.path.expanduser("~")
        for root, dirs, files in os.walk(home_path):
            for file in files:
                try:
                    path = os.path.join(root, file)
                    with open(path, 'r', encoding='utf-8', errors='ignore') as f:
                        content = f.read()
                        if self.keyword.lower() in content.lower():
                            print(f"üîç –ù–∞–º–µ—Ä–µ–Ω–∞ –¥—É–º–∞ '{self.keyword}' –≤: {path}")
                except Exception:
                    continue

    def fetch_web_data(self, user_input):
        parts = user_input.split(" ", 1)
        if len(parts) < 2:
            print("üåê –§–æ—Ä–º–∞—Ç: fetch <url>")
            return
        url = parts[1]
        try:
            print(f"üåç –ò–∑–≤–ª–∏—á–∞–º –¥–∞–Ω–Ω–∏ –æ—Ç {url}...")
            r = requests.get(url)
            print("üì° –ü—ä—Ä–≤–∏—Ç–µ 500 —Å–∏–º–≤–æ–ª–∞ –æ—Ç –æ—Ç–≥–æ–≤–æ—Ä–∞:")
            print(r.text[:500])
        except Exception as e:
            print("‚ö†Ô∏è –ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∑–∞—è–≤–∫–∞:", e)

    def exit(self, *_):
        print("üõë –ò–∑–ª–∏–∑–∞–º –æ—Ç –∞–≤—Ç–æ–Ω–æ–º–µ–Ω —Ä–µ–∂–∏–º.")
        self.mode = "exit"


if __name__ == "__main__":
    sofia = Sofia()
    sofia.start()
